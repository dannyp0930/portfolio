generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  refreshToken String @default("")
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Intro {
  id                Int   @id @default(autoincrement())
  title             String
  description  String
  resumeFileUrl String?
  bannerImageUrl String
  bannerImageUrlTablet String?
  bannerImageUrlMobile String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Contact {
  id     Int    @id @default(autoincrement())
  type   String
  value  String
  label  String
}

model Education {
  id               Int      @id @default(autoincrement())
  institutionName  String
  degreeStatus     String
  startDate        DateTime
  endDate          DateTime
}

model Experience {
  id            Int      @id @default(autoincrement())
  organization  String
  startDate     DateTime
  endDate       DateTime
  description   String
}

model CareerOverview {
  id            Int      @id @default(autoincrement())
  organization  String
  position      String
  startDate     DateTime
  endDate       DateTime?
  description   String
}

model Language {
  id            Int      @id @default(autoincrement())
  languageName  String
  proficiency   String
  examDate      DateTime
  institution   String
}

model Certificate {
  id                  Int      @id @default(autoincrement())
  certificateName     String
  issueDate           DateTime
  issuingOrganization String
}

model Project {
  id          Int   @id @default(autoincrement())
  title       String
  intro       String
  organization String?
  startDate   DateTime
  endDate     DateTime?
  github      String?
  homepage    String?
  notion      String?
  projectDetail ProjectDetail?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProjectDetail {
  id          Int           @id @default(autoincrement())
  projectId   Int           @unique
  description String
  images      ProjectImage[]
  project     Project       @relation(fields: [projectId], references: [id])
}

model ProjectImage {
  id          Int           @id @default(autoincrement())
  url         String
  projectDetailId Int
  projectDetail ProjectDetail @relation(fields: [projectDetailId], references: [id])
}

model Career {
  id          Int   @id @default(autoincrement())
  companyName String
  startDate     DateTime
  endDate       DateTime?
  description String
  position    String
  duty        String
  careerDetails CareerDetail[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CareerDetail {
  id        Int     @id @default(autoincrement())
  careerId  Int
  title     String
  content   String  @db.Text
  career    Career  @relation(fields: [careerId], references: [id])
}

model Skill {
  id            Int   @id @default(autoincrement())
  title         String
  description   String
  level         Int
  imageUrl      String
  category      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}